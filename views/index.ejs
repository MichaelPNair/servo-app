<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans+Condensed&display=swap" rel="stylesheet">
    <title>Servo App</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="grid-wrapper">
        <div class="left-sidebar">
            <div class="spotlight">
                <div class="address-info">
                    <h2>Spotlight</h2>
                    <p>Name: <span class="name"></span></p>
                    <p>Address: <span class="address"></span></p>
                </div>
                <div class="refresh">
                    <a id="refresh" href="">Refresh</a>
                    <div id="logo"></div>
                </div>
            </div>
            <div class="stats">
                <h2>Stats</h2>
                <h4>Total station: 5244</h4>
                <h4>Total Owners: 32</h4>
            </div>
            <div class="oil-prices">
                <h2>Latest Prices</h2>
                <div class="date">
                </div>
                <div class="price">
                    <li class="wti-price"></li>
                    <li class="brent-price"></li>
                    <li class="natural-price"></li>
                </div>
            </div>
            <div class="about">
                <h2>About</h2>
                <h3>Team Mercator</h3>
                <ul>
                    <li>Michael Nair <a href="https://github.com/MichaelPNair">GitHub Profile</a></li>
                    <li>Chatkamon Chantaraparsop <a href="https://github.com/zebelity">GitHub Profile</a></li>
                    <li>Geoff Lazarus <a href="https://github.com/geoffjlazarus/">GitHub Profile</a></li>
                    <li>Andy Wang <a href="https://github.com/andysw8">GitHub Profile</a></li>
                    <li>Alessandra Manalansan <a href="https://github.com/alesmnlnsan">GitHub Profile</a></li>
                </ul>
            </div>
        </div>
        <div id="map">
        </div>
        <div class="right-sidebar">
            <div class="time">
                <div class="show-time"></div>
                <div id="clockContainer">
                    <div id="hour"></div>
                    <div id="minute"></div>
                    <div id="second"></div>
                </div>
            </div>
            <div class="location">
            <h2>Map Center Location</h2>
            <!-- Lat: -34.456172411199496
            Long: 149.46732580957246 -->
            <p>Lat: <span class="lat"> </span></p>
            <p>Lng: <span class="lng"> </span></p>
            </div>
            <div class="nearest">
                <h2>Nearest</h2>
            </div>
        </div>
    </div>
    <script>
        (g => {
            var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window;
            b = b[c] || (b[c] = {});
            var d = b.maps || (b.maps = {}),
                r = new Set,
                e = new URLSearchParams,
                u = () => h || (h = new Promise(async (f, n) => {
                    await (a = m.createElement("script"));
                    e.set("libraries", [...r] + "");
                    for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]);
                    e.set("callback", c + ".maps." + q);
                    a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
                    d[q] = f;
                    a.onerror = () => h = n(Error(p + " could not load."));
                    a.nonce = m.querySelector("script[nonce]")?.nonce || "";
                    m.head.append(a);
                }));
            d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n))
        })({
            key: '<%=process.env.GOOGLEMAPS_API_KEY%>',
            v: "weekly",
        });
        let map, infoWindow;

        async function initMap() {
            
            const {Map} = await google.maps.importLibrary("maps");
            const {AdvancedMarkerElement} = await google.maps.importLibrary("marker");
            
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(position => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                document.querySelector('.lat').textContent = lat;
                document.querySelector('.lng').textContent = lng;
                const centerPosition = { lat: lat, lng: lng  }

                map = new Map(document.getElementById("map"), {
                zoom: 16,
                minZoom: 9,
                center: centerPosition,
                mapId: "DEMO_MAP_ID",
            });

            let latLng = map.getCenter()

            map.addListener('center_changed', () => {
                latLng = map.getCenter()
                let lat = document.querySelector('.lat')
                let lng = document.querySelector('.lng')
                lat.innerText = latLng.lat()
                lng.innerText = latLng.lng()
            })
            // let lat = document.querySelector('.lat')
            // let lng = document.querySelector('.lng')
            // lat.innerText = latLng.lat()
            // lng.innerText = latLng.lng()
           // debugger
    
           
            fetch('/api/stations/all')
                .then(response => response.json())
                .then(data => {
                    infoWindow = new google.maps.InfoWindow();
                    data.forEach(station => {
                        const marker = new google.maps.Marker({
                            map: map,
                            position: { lat: station.latitude, lng: station.longitude },
                            address: station.address,
                            title: station.name,
                        });
                        marker.addListener('click', () => {
                            infoWindow.setContent(`<b>${marker.title}</b><p>${marker.address}</p>`);
                            infoWindow.open(map, marker);
                        });
                        // marker.addListener('mouseout', () => {
                        //     infoWindow.close();
                        // })
                    });
                
            fetch('/api/stations/random')
                .then(response => response.json())
                .then(data => {
                    const name = document.querySelector('.name')
                    const address = document.querySelector('.address')
                    const logo = document.querySelector('#logo')
                    const logoImage = document.createElement("img")
                    logo.appendChild(logoImage)
                    logoImage.src = data.logo_url
                    logoImage.style.height = '64px'
                    logoImage.style.width = '64px'
                    
                    name.innerText = data.name
                    address.innerText = data.address
                    console.log(data)
                })
                const refresh = document.querySelector('#refresh')
                    refresh.addEventListener('click', fetch('/api/stations/random'))
            })



                });
            } else {
                alert("Please enable location services to use this feature.");
            }
            

            
        }
        initMap();
    </script>
    <script type="module" src="servos_api.js"></script>
    <script type="module" src="components/oil-prices.js"></script>
    <script type="module" src="components/nearest.js"></script>
    <script type="module" src="components/time.js"></script>
    <script type="module" src="client.js"></script>
</body>
</html>